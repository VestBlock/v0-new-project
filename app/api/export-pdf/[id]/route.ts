import { type NextRequest, NextResponse } from "next/server"
import { getAnalysis } from "@/lib/analyses"
import { supabase } from "@/lib/supabase"

export async function GET(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    // Authenticate the user
    const authHeader = request.headers.get("authorization")
    if (!authHeader) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    const token = authHeader.split(" ")[1]
    const {
      data: { user },
      error: authError,
    } = await supabase.auth.getUser(token)

    if (authError || !user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 })
    }

    // Get the analysis
    const analysisId = params.id
    const analysis = await getAnalysis(analysisId, user.id)

    if (!analysis) {
      return NextResponse.json({ error: "Analysis not found" }, { status: 404 })
    }

    if (analysis.status !== "completed") {
      return NextResponse.json({ error: "Analysis not completed" }, { status: 400 })
    }

    // Generate PDF content (in a real implementation, this would use a PDF library)
    const pdfContent = generatePDFContent(analysis)

    // In a real implementation, we would generate a PDF file
    // For now, we'll return a text file
    return new NextResponse(pdfContent, {
      headers: {
        "Content-Type": "text/plain",
        "Content-Disposition": `attachment; filename="credit-analysis-${analysisId}.txt"`,
      },
    })
  } catch (error) {
    console.error("Error exporting PDF:", error)
    return NextResponse.json({ error: "Internal server error" }, { status: 500 })
  }
}

function generatePDFContent(analysis: any): string {
  const result = analysis.result
  const date = new Date().toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  })

  const content = `
VESTBLOCK CREDIT ANALYSIS REPORT
Generated on: ${date}

CREDIT SCORE: ${result.overview.score}
Rating: ${
    result.overview.score >= 750
      ? "Excellent"
      : result.overview.score >= 700
        ? "Very Good"
        : result.overview.score >= 650
          ? "Good"
          : result.overview.score >= 600
            ? "Fair"
            : result.overview.score >= 550
              ? "Poor"
              : "Very Poor"
  }

SUMMARY:
${result.overview.summary}

POSITIVE FACTORS:
${result.overview.positiveFactors.map((factor: string) => `- ${factor}`).join("\n")}

NEGATIVE FACTORS:
${result.overview.negativeFactors.map((factor: string) => `- ${factor}`).join("\n")}

RECOMMENDED DISPUTES:
${result.disputes.items
  .map(
    (item: any) => `
- Account: ${item.accountName} (${item.accountNumber})
  Issue: ${item.issueType}
  Action: ${item.recommendedAction}
  Bureau: ${item.bureau}
`,
  )
  .join("")}

CREDIT IMPROVEMENT STRATEGIES:
${result.creditHacks.recommendations
  .map(
    (hack: any) => `
- ${hack.title}
  Description: ${hack.description}
  Impact: ${hack.impact}
  Timeframe: ${hack.timeframe}
`,
  )
  .join("")}

INCOME OPPORTUNITIES:
${result.sideHustles.recommendations
  .map(
    (hustle: any) => `
- ${hustle.title}
  Description: ${hustle.description}
  Potential Earnings: ${hustle.potentialEarnings}
  Startup Cost: ${hustle.startupCost}
  Difficulty: ${hustle.difficulty}
`,
  )
  .join("")}

This report was generated by VestBlock AI Credit Analysis.
For more information, visit vestblock.io
`

  return content
}
